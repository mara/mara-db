import pathlib
import pytest
import subprocess
import typing as t

from mara_db import dbs, shell

from ..command_helper import *
from ..db_test_helper import db_is_responsive
from .test_mssql import MSSQL_USER, MSSQL_PASSWORD, MSSQL_DATABASE

# make sure that the tests of 'test_mssql' are run before the tests in this file:
from .test_mssql import test_mssql_ddl


@pytest.fixture(scope="session")
def mssql_sqsh_db(docker_ip, docker_services) -> t.Tuple[str, int]:
    """Ensures that SQL Server server is running on docker."""

    docker_port = docker_services.port_for("mssql", 1433)
    db = dbs.SqshSQLServerDB(host=docker_ip, port=docker_port, user=MSSQL_USER, password=MSSQL_PASSWORD, database=MSSQL_DATABASE)

    # here we need to wait until the SQL Server port is available.
    docker_services.wait_until_responsive(
        timeout=30.0, pause=0.1, check=lambda: db_is_responsive(db)
    )

    return db


@pytest.mark.dependency()
def test_mssql_sqsh_shell_query_command(mssql_sqsh_db):
    command = execute_sql_statement_command(mssql_sqsh_db, "SELECT 1")
    (exitcode, pstdout) = subprocess.getstatusoutput(command)
    print(pstdout)
    assert exitcode == 0


@pytest.mark.dependency()
def test_mssql_sqsh_shell_copy_to_stout(mssql_sqsh_db):
    command = execute_sql_statement_to_stdout_csv_command(mssql_sqsh_db, "SELECT 1 AS Col1, 'FOO' AS Col2 UNION ALL SELECT 2, 'BAR'")
    (exitcode, pstdout) = subprocess.getstatusoutput(command)
    print(pstdout)
    assert exitcode == 0
    assert pstdout == '''1,FOO
2,BAR'''


@pytest.mark.dependency(depends=["test_mssql_sqsh_shell_query_command", "test_mssql_sqsh_shell_copy_to_stout"])
def test_mssql_sqsh_shell_copy_from_stdin_csv_noheader(mssql_sqsh_db):
    # reading csv file...
    names_csv_file_path = str((pathlib.Path(__file__).parent / '../seed/names.csv').absolute())
    command = f'cat {names_csv_file_path} \\\n'
    command += '  | ' + shell.copy_from_stdin_command(mssql_sqsh_db,target_table='names',csv_format=True,skip_header=False)#,delimiter_char=',')
    print(command)

    (exitcode, pstdout) = subprocess.getstatusoutput(command)
    print(pstdout)
    assert exitcode == 0

    # check if writing was successful

    command = execute_sql_statement_to_stdout_csv_command(mssql_sqsh_db, "SELECT COUNT(*) FROM names")
    (exitcode, pstdout) = subprocess.getstatusoutput(command)
    assert exitcode == 0
    assert pstdout == "10"

    command = execute_sql_statement_to_stdout_csv_command(mssql_sqsh_db, "SELECT name FROM names WHERE id = 1")
    (exitcode, pstdout) = subprocess.getstatusoutput(command)
    assert exitcode == 0
    assert pstdout == "Elinor Meklit"


@pytest.mark.dependency(depends=["test_mssql_sqsh_shell_query_command", "test_mssql_sqsh_shell_copy_to_stout", "test_mssql_ddl"])
def test_mssql_sqsh_shell_copy_from_stdin_csv_skipheader(mssql_sqsh_db):
    # reading csv file...
    names_csv_file_path = str((pathlib.Path(__file__).parent / '../seed/names_header.csv').absolute())
    command = f'cat {names_csv_file_path} \\\n'
    command += '  | ' + shell.copy_from_stdin_command(mssql_sqsh_db,target_table='names_with_header',csv_format=True,skip_header=True,delimiter_char=',')
    print(command)

    (exitcode, pstdout) = subprocess.getstatusoutput(command)
    print(pstdout)
    assert exitcode == 0

    # check if writing was successful

    command = execute_sql_statement_to_stdout_csv_command(mssql_sqsh_db, "SELECT COUNT(*) FROM names_with_header")
    (exitcode, pstdout) = subprocess.getstatusoutput(command)
    assert exitcode == 0
    assert pstdout == "10"

    command = execute_sql_statement_to_stdout_csv_command(mssql_sqsh_db, "SELECT name FROM names_with_header WHERE id = 1")
    (exitcode, pstdout) = subprocess.getstatusoutput(command)
    assert exitcode == 0
    assert pstdout == "Elinor Meklit"
